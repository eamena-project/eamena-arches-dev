---
title: "<img src='https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/logo_complete.png' style='height: 50px; vertical-align:middle;margin: 0 0 0 0; background: transparent;'><br>eamenaR"

subtitle: "**An R package for the<br>statistical analysis and data management<br>of the EAMENA database**"
author: "Thomas Huet"
title-slide-attributes:
  data-background-image: "https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaDB-bck.png"
  data-background-size: "60%"
  data-background-opacity: "0.5"
format:
  revealjs: 
    css: https://zoometh.github.io/thomashuet/css/quarto.css
    code-fold: false
    code-summary: "<small>Code</small>"
    slide-number: true
    chalkboard: true
    scrollable: true
    preview-links: auto
    reference-location: document
    footnotes-hover: true
    logo: https://raw.githubusercontent.com/zoometh/thomashuet/master/teach/stats/images/inst-uni-oxford_.png
    footer: "<em>eamenaR</em> <img src='https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR_logo.png' style='height: 40px;vertical-align: middle;'> EAMENA project, March 2023 - Thomas Huet"
    margin: 0
    width: 1200
---


# Introduction {background-color="#f3e7b3"}

## Purpose

```{r, echo=FALSE}
library(shiny)
library(rmarkdown)
library(knitr)
library(kableExtra)
library(plotly)
library(archdata)
library(ggplot2)
library(DT)
library(dplyr)
library(eamenaR)
```

* Data management between EAMENA DB and 3<sup>rd</sup> party apps
* Data analysis and audit of the EAMENA DB content

```{mermaid}
flowchart LR
A[(EAMENA<br>DB)] <--data<br>exchange--> B{{"eamenaR"}}:::eamenaRpkg;
B --data<br>management--> B;
B <--data<br>exchange--> C((third part<br>app));
B --"output"--> D[maps<br>charts<br>listings<br>...];
classDef eamenaRpkg fill:#e3c071;
```


## IT Stack

*eamenaR* <img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR_logo.png" alt="" style="height: 70px; vertical-align:middle"> is an R package hosted on GitHub:

<a href="https://www.r-project.org/"><img src="https://www.r-project.org/logo/Rlogo.svg" alt="" style="height: 80px;vertical-align: middle;"></a> is a scripting language for data science is the 1Ô∏è‚É£<sup>st</sup> used by archaeologists, and the 18<sup>th</sup> worldwide

<br>

<a href="https://github.com"><img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="" style="height: 80px;vertical-align: middle;"></a> GitHub is the üîù popular web-platform for source code management and software development (with over 128 million public repositories)


## Data

::: {.panel-tabset}

### Files

GeoJSON is the privileged format to work with spatial data

![](https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/main/www/geojson-export.png){height=400px}<div class="captiontext"></div>
\

### PostgreSQL

Some functions allow to query directly the PostgreSQL

```{.r code-line-numbers="9-12"}
  ...
    ...
    bc.uuid <- eamenaR::ref_ids(concept.name = "Built Component Observation",
                                choice = "db.concept.uuid")
    for(cc in uuid.cc){
      for (hav in length(having.df[["uuid"]])){
        having.uuid <- having.df[["uuid"]][hav]
        sqll <- stringr::str_interp("
              SELECT resourceinstanceid
              FROM tiles
              WHERE resourceinstanceid::text LIKE '${cc}'
              AND tiledata ->> '${bc.uuid}' = '${having.uuid}'
                         ")
        uuid.having <- RPostgres::dbGetQuery(db.con, sqll)
        uuids.having <- rbind(uuids.having, uuid.having)
      }
    }
  ...
```


:::


## Portability

Allow the package to work with different instances of <img src='https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/app-arches.png' style='height: 35px;vertical-align: middle;'>

::: {.panel-tabset}

### Mapping table

Most of the hard-coded parts are stored in [ids.csv](https://github.com/eamena-project/eamenaR/blob/main/inst/extdata/ids.csv)

```{r}
ids <- read.csv("https://raw.githubusercontent.com/eamena-project/eamenaR/main/inst/extdata/ids.csv")
kable(ids) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20)
```

\

### `ref_ids()` function

Retrieve the correspondences between customized Arches label (e.g. "`EAMENA ID`"), R shortnames (e.g. "`hp.id`") and Arches UUID (e.g. "`34cfe992-c2c0-11ea-9026-02e7594ce0a0`")

```{.r}
eamenaR::ref_ids(concept.name = "EAMENA ID", choice = "db.concept.name")
```

```{r}
#| echo: false

eamenaR::ref_ids("hp.id")
```


```{.r}
eamenaR::ref_ids(concept.name = "EAMENA ID", choice = "db.concept.uuid")
```

```{r}
#| echo: false

eamenaR::ref_ids("hp.id", choice = "db.concept.uuid")
```


### Example

```{.r code-line-numbers="3-4"}
  ...
    ...
    bc.uuid <- eamenaR::ref_ids(concept.name = "Built Component Observation",
                                choice = "db.concept.uuid")
    for(cc in uuid.cc){
      for (hav in length(having.df[["uuid"]])){
        having.uuid <- having.df[["uuid"]][hav]
        sqll <- stringr::str_interp("
              SELECT resourceinstanceid
              FROM tiles
              WHERE resourceinstanceid::text LIKE '${cc}'
              AND tiledata ->> '${bc.uuid}' = '${having.uuid}'
                         ")
        uuid.having <- RPostgres::dbGetQuery(db.con, sqll)
        uuids.having <- rbind(uuids.having, uuid.having)
      }
    }
  ...
```


:::


## Install and documentation

Easy to install and to load:

```{.r }
devtools::install_github("eamena-project/eamenaR")
library(eamenaR)
```

Regularly updated online documentation

```{.r }
?geojson_map
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR-functions-doc_geojson_map.png" width="500">

</center>

# Data analysis<br>and audit {background-color="#f3e7b3" }

## Generalities {background-interactive="true"}

Plots and maps are created 'flat' or interactive by setting the option `interactive` to `r TRUE`

```{.r}
geojson_boxplot(stat = "area", by = "route", interactive = T, verbose = F)
```

```{=html}
<iframe width="1000" height="400" src="http://shinyserver.cfs.unipi.it:3838/teach/stats/eamenaR/caravanserais_areas.html"></iframe>
```

## Maps

Maps of heritage places

::: {.panel-tabset}

### General Map

```{.r }
geojson_map(map.name = "caravanserail", fig.width = 15, fig.height = 10)
```


<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserail.png" width="600">

</center>

### List of IDs

```{.r }
geojson_stat(stat = "list_ids")
```

```{r }
#| echo: false

geojson_stat(stat = "list_ids")
```
\
\

### Thematic Map

```{r}
geojson_map(map.name = "caravanserail", field.names = c("Damage Extent Type"))
```


<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserail_Damage Extent Type.png" width="600">

</center>


### List of fields

```{.r }
geojson_stat(stat = "list_fields")
```

```{r }
#| echo: false

geojson_stat(stat = "list_fields")
```
\
\

:::

## Paths

Or maps for paths between heritage places

```{.r }
geojson_map_path(routes = c(0, 1, 2, 3, 4))
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserail_paths.png" width="600">

</center>

## Elevations

Use API data, on the fly

::: {.panel-tabset}

### Function

```{.r }
geojson_addZ()
```

### Details

<div class="div-code"> 
<small>geojson_addZ() code</small><br>
```{.r code-line-numbers="12-24"}
 ...
 # type of geometries
    if(sf::st_geometry_type(a.geom$geometry) %in% c("MULTIPOINT", "POLYGON", "MULTIPOLYGON")){
      # centroids
      coordinates <- sf::st_coordinates(sf::st_centroid(a.geom))
    }
    if(sf::st_geometry_type(a.geom$geometry) == "POINT"){
      coordinates <- sf::st_coordinates(a.geom)
    }
    X <- coordinates[1]
    Y <- coordinates[2]
    # elevation API
    if (elevation.api == 'gmrt'){
      http.req <- paste0(
        "https://www.gmrt.org/services/ProfileServer?boundspath=",
        coordinates,
        "&format=json"
      )
    }
    if (elevation.api == 'open-elevation'){
      http.req <- paste0(
        "https://api.open-elevation.com/api/v1/lookup?locations=", X, ",", Y
      )
    }
    r <- httr::GET(http.req, httr::timeout(timeout))
    rr <- httr::content(r)
    ...
```
</div>

:::

\

## Profiles

Draw elevation profiles :

```{.r }
geojson_map_path(routes = c(0, 1, 2, 3, 4), export.type = "profile")
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/paths_profile.png" width="700">

</center>

## Statistics

::: {.panel-tabset}

### Areas

```{.r }
geojson_boxplot(stat.name = "caravanserais_areas", stat = "area", by = "route")
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserais_areas_routes.png" width="700">

</center>

### Conditions

```{.r }
geojson_stat(stat.name = "overall_cond", stat = "stats",
             field.names = c("Overall Condition State Type"))
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/overall_condition_pie.png" width="700">

</center>

### Disturbances

```{.r }
geojson_stat(stat.name = "distrub", stat = "stats",
            chart.type = "hist", field.names = c("Disturbance Cause Type"))
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/distrub_cause_category_type_hist.png" width="700">

</center>

### Periods

```{.r}
d <- list_cultural_periods(db = "geojson", d = d)
plot_cultural_periods(d = d, field = "subperiods", plot.type = "by.eamenaid")
```

![](https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/cultural_subperiods_byeamenaid.png){height=400px}<div class="captiontext">caravanserais subperiods</div>

### Orientations

```{.r}
geojson_stat(stat.name = "orientations", stat = "stats",
             chart.type = "radar", field.names = c("Resource Orientation"))
```

![](https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/orientations_radar.png){height=400px}<div class="captiontext">caravanserais orientations</div>

:::

\

## Interactivity

Interactive charts or maps 

::: {.panel-tabset}

### <img src="https://raw.githubusercontent.com/zoometh/thomashuet/master/img/r-pkg-plotly.png" style="height: 45px; vertical-align:middle">

```{.r}
geojson_map_path(interactive = T, selected.category = c(1))
```

```{=html}
<iframe width="1000" height="500" src="http://shinyserver.cfs.unipi.it:3838/teach/stats/eamenaR/paths_map_route_1.html"></iframe>
```

### <img src="https://raw.githubusercontent.com/zoometh/thomashuet/master/img/r-pkg-leaflet.png" style="height: 40px; vertical-align:middle">

```{.r}
geojson_map(interactive = T)
```

```{=html}
<iframe width="1000" height="500" src="http://shinyserver.cfs.unipi.it:3838/teach/stats/eamenaR/caravanserail_plotly.html"></iframe>
```


:::

\
\



## FAIR data

Makes data FAIR (*Findable, Accessible, Interoperable, Reusable*)


```{mermaid}
flowchart LR
subgraph ide1 [<b>F</b>indable, <b>A</b>ccessible]
A[(EAMENA<br>DB)];
end
A[(EAMENA<br>DB)] <---> B{{"eamenaR"}}:::eamenaRpkg;
subgraph ide2 [<b>I</b>nteroperable, <b>R</b>eusable]
B;
end
classDef eamenaRpkg fill:#e3c071;
```


<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR-fair.png" width="600">

</center>

# Data<br>management {background-color="#f3e7b3"}





# Practice {background-color="#f3e7b3"}


## TESTS

<a href="https://github.com/zoometh/thomashuet/blob/8f5665eca9efc76f26847258711a71b5adda1133/teachings/stats/R4Archaeo/index.qmd#L402"><small><notes>source code<img src="https://raw.githubusercontent.com/zoometh/thomashuet/master/img/app-github-1.png" style="height: 35px;vertical-align: middle;"/></notes></small></a>


```{mermaid}
flowchart LR
subgraph ide1 [<b>F</b>indable, <b>A</b>ccessible]
A[(EAMENA<br>DB)];
end
A[(EAMENA<br>DB)] <---> B{{"eamenaR"}}:::eamenaRpkg;
subgraph ide2 [<b>I</b>nteroperable, <b>R</b>eusable]
B;
end
classDef eamenaRpkg fill:#e3c071;
```



```{mermaid}
flowchart LR
A[(EAMENA<br>DB)] <--data<br>exchange--> B{{"eamenaR"}}:::eamenaRpkg;
B --data<br>management--> B;
B <--data<br>exchange--> C((third part<br>app));
B --"output"--> D[maps<br>charts<br>listings<br>...];
classDef eamenaRpkg fill:#e3c071;
```


