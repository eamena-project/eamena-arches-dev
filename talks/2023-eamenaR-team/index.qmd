---
title: "eamenaR"
subtitle: "**An R package for<br>statistical analysis and data management<br>of the EAMENA database**"
author: "EAMENA project"
title-slide-attributes:
  data-background-image: "https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaDB-bck.png"
  data-background-size: "50%"
  data-background-opacity: "0.4"
format:
  revealjs: 
    css: https://zoometh.github.io/thomashuet/css/quarto.css
    code-fold: false
    code-summary: "<small>Code</small>"
    slide-number: true
    chalkboard: true
    scrollable: true
    preview-links: auto
    reference-location: document
    footnotes-hover: true
    logo: https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/logo_complete.png
    footer: "<em>eamenaR</em>  <img src='https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR_logo.png' style='height: 45px;vertical-align: middle;'> - Arcadia meeting, London (UK), 10<sup>th</sup> March 2023"
    margin: 0
    width: 1200
---


# Introduction {background-color="#f3e7b3"}

## Purpose

```{r, echo=FALSE, warning=FALSE, message=FALSE}
library(shiny)
library(rmarkdown)
library(knitr)
library(kableExtra)
library(plotly)
library(archdata)
library(ggplot2)
library(DT)
library(dplyr)
library(eamenaR)
```

* Data analysis and audit of the EAMENA DB content
* Data management between EAMENA DB and 3<sup>rd</sup> party apps

```{mermaid}
flowchart LR
subgraph ide1 [Arches];
A[(EAMENA<br>DB)];
end;
A <--data<br>exchange--> B{{"eamenaR"}}:::eamenaRpkg;
B --data<br>analysis & management--> B;
B <--data<br>exchange--> C((3<sup>rd</sup> part<br>app));
B --"output"--> D[maps<br>charts<br>listings<br>...];
classDef eamenaRpkg fill:#e3c071;
```


## IT Stack

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR_logo.png" alt="" style="height: 70px; vertical-align:middle"> is an R package hosted on GitHub:

* <a href="https://www.r-project.org/"><img src="https://www.r-project.org/logo/Rlogo.svg" alt="" style="height: 80px;vertical-align: middle;"></a> is a scripting language for data science is the 1Ô∏è‚É£<sup>st</sup> used by archaeologists, and the 18<sup>th</sup> worldwide

* <a href="https://github.com"><img src="https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" alt="" style="height: 80px;vertical-align: middle;"></a> GitHub is the üîù popular web-platform for source code management and software development (with over 128 million public repositories)

## <img src="https://www.r-project.org/logo/Rlogo.svg" alt="" style="height: 80px;vertical-align: middle;"> libraries

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/main/www/stack-eamenar.png" width="450">

</center>


## Data

::: {.panel-tabset}

### Files

GeoJSON is the privileged format to work with spatial data

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/main/www/geojson-export.png" width="700">

</center>

\

### PostgreSQL

Some functions allow to query directly the PostgreSQL

```{.r code-line-numbers="9-12"}
  ...
    ...
    bc.uuid <- eamenaR::ref_ids(concept.name = "Built Component Observation",
                                choice = "db.concept.uuid")
    for(cc in uuid.cc){
      for (hav in length(having.df[["uuid"]])){
        having.uuid <- having.df[["uuid"]][hav]
        sqll <- stringr::str_interp("
              SELECT resourceinstanceid
              FROM tiles
              WHERE resourceinstanceid::text LIKE '${cc}'
              AND tiledata ->> '${bc.uuid}' = '${having.uuid}'
                         ")
        uuid.having <- RPostgres::dbGetQuery(db.con, sqll)
        uuids.having <- rbind(uuids.having, uuid.having)
      }
    }
  ...
```


:::


## Portability

<span style="color:#808080;">(in theory)</span> <img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR_logo.png" alt="" style="height: 70px; vertical-align:middle"> can work with different <img src='https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/app-arches.png' style='height: 35px;vertical-align: middle;'> instances

::: {.panel-tabset}

### Mapping table

Most of the hard-coded parts are stored in [ids.csv](https://github.com/eamena-project/eamenaR/blob/main/inst/extdata/ids.csv)

```{r}
ids <- read.csv("https://raw.githubusercontent.com/eamena-project/eamenaR/main/inst/extdata/ids.csv")
kable(ids) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20)
```

\

### `ref_ids()`

Correspondences between:

  - Arches UUID (e.g. "`34cfe992-c2c0-11ea-9026-02e7594ce0a0`");  
  - Arches labels (e.g. "`EAMENA ID`");  
  - R short names (e.g. "`hp.id`");  


### Example


```{.r}
eamenaR::ref_ids(concept.name = "EAMENA ID", choice = "db.concept.name")
```

```{r}
#| echo: false

eamenaR::ref_ids(concept.name = "34cfe992-c2c0-11ea-9026-02e7594ce0a0", choice = "db.concept.name")
```

\

```{.r}
eamenaR::ref_ids(concept.name = "EAMENA ID", choice = "r.concept.name")
```

```{r}
#| echo: false

eamenaR::ref_ids(concept.name = "EAMENA ID", choice = "r.concept.name")
```

\

```{.r}
eamenaR::ref_ids(concept.name = "EAMENA ID", choice = "db.concept.uuid")
```

```{r}
#| echo: false

eamenaR::ref_ids(concept.name = "hp.id", choice = "db.concept.uuid")
```

\


:::


## Install and documentation

Install and to load:

```{.r }
devtools::install_github("eamena-project/eamenaR")
library(eamenaR)
```

Documentation

```{.r }
?geojson_map
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR-functions-doc_geojson_map.png" width="500">

</center>

# Data analysis <br>and audit {background-color="#f3e7b3" }

## Generalities

Plots and maps are 'flat' or interactive based on the option `interactive`

```{.r}
geojson_boxplot(stat = "area", by = "route", interactive = T, verbose = F)
```

\

```{=html}
<iframe width="1000" height="350" src="http://shinyserver.cfs.unipi.it:3838/eamena/eamenaR/caravanserais_areas.html"></iframe>
```

## Maps

Maps of heritage places

::: {.panel-tabset}

### General

```{.r }
geojson_map(geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson"),
            map.name = "caravanserail")
```


<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserail.png" width="600">

</center>

### Thematic

```{.r}
geojson_map(geojson.path = paste0(system.file(package = "eamenaR"),
                                  "/extdata/caravanserail.geojson"),
            map.name = "caravanserail", field.names = c("Damage Extent Type"))
```

:::: {.columns}

::: {.column width="50%"}

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserail_Damage Extent Type.png" width="600">

</center>

:::

::: {.column width="50%"}

```{=html}
<iframe width="1200" height="500" src="http://shinyserver.cfs.unipi.it:3838/eamena/eamenaR/symbology.html"></iframe>
```

:::

::::

### Paths

Maps for paths between heritage places

```{.r }
geojson_map_path(geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson"),
                 csv.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail_paths.csv"))
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserail_paths.png" width="700">

</center>

### List of IDs

```{.r }
geojson_stat(stat = "list_ids")
```

```{r }
#| echo: false

geojson_stat(stat = "list_ids")
```
\
\

### List of fields

```{.r }
geojson_stat(stat = "list_fields")
```

```{r }
#| echo: false

geojson_stat(stat = "list_fields")
```
\
\

:::

## Elevations

::: {.panel-tabset}

### API elevation data

Use API data, on the fly, to retrieve elevations

```{.r }
geojson_addZ(geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson"),
             elevation.api = "gmrt_point")
```

```{=html}
<iframe width="1200" height="1000" src="https://www.gmrt.org/services/pointserverinfo.php#!/services/getGMRTPoint"></iframe>
```

\

### Profiles

Elevation profiles :

```{.r }
geojson_map_path(map.name = "map_path",
                 geojson.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail.geojson"),
                 csv.path = paste0(system.file(package = "eamenaR"), "/extdata/caravanserail_paths.csv"),
                 export.type = "profile")
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/map_path_profile.png" width="700">

</center>

:::

\

## Statistics

::: {.panel-tabset}

### Areas

```{.r }
geojson_boxplot(stat.name = "caravanserais_areas", stat = "area", by = "route")
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/caravanserais_areas_routes.png" width="700">

</center>

### Conditions

```{.r }
geojson_stat(stat.name = "overall_cond", stat = "stats",
             field.names = c("Overall Condition State Type"))
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/overall_condition_pie.png" width="700">

</center>

### Disturbances

```{.r }
geojson_stat(stat = "stats", chart.type = "hist",
             field.names = c("Disturbance Cause Category Type"))
```

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/distrub_cause_category_type_hist.png" width="700">

</center>

### Periods

```{.r}
d <- list_cultural_periods(db = "geojson", d = d)
plot_cultural_periods(d = d, field = "subperiods", plot.type = "by.eamenaid")
```


<center>

<img src="raw.githubusercontent.com/eamena-project/eamenaR/master/results/cultural_subperiods_byeamenaid.png" width="600">

</center>


### Orientations

```{.r}
geojson_stat(stat.name = "orientations", stat = "stats",
             chart.type = "radar", field.names = c("Resource Orientation"))
```


<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamenaR/master/results/orientations_radar.png" width="500">

</center>

:::

\

## Connected components {auto-animate=true}

:::: {.columns}

::: {.column width="33%"}

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/main/www/relat-resource-ex1-img.png" width="600">

</center>

:::

::: {.column width="33%"}

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/main/www/relat-resource-ex1-plan.png" width="600">

</center>

:::

::: {.column width="33%"}

<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/main/www/relat-resource-ex1.png" width="600">

</center>

:::


::::



```{.r}
d <- hash::hash()
my_con <- RPostgres::dbConnect(drv = RPostgres::Postgres(),
                               user = 'postgres',
                               password = 'postgis',
                               dbname = 'eamena',
                               host = 'ec2-54-155-109-226.eu-west-1.compute.amazonaws.com',
                               port = 5432)

df <- list_related_resources(db.con = my_con,
                             d = d,
                             relationshiptype = "PX_is_related_to",
                             id = "EAMENA-0164943",
                             disconn = FALSE)
df
```

```{.r}
hps <- c("EAMENA-0164943", "EAMENA-0164937", "EAMENA-0164905")
bcs <- c("Room", "Stable")

df.measures.all <- data.frame(hp.id = character(),
                              hp.uuid = character(),
                              cc.id = character(),
                              cc.uuid = character(),
                              cc.type = character(),
                              cc.measure = numeric())

for(ea in hps){
  df <- list_related_resources(db.con = my_con,
                               d = d,
                               id = ea,
                               disconn = F)
  for(have in bcs){
    df.measures <- select_related_resources(db.con = my_con,
                                            df = df,
                                            having = have,
                                            disconn = F)
    df.measures.all <- rbind(df.measures.all, df.measures)
  }
}
df.measures.all[ , c("hp.id", "cc.id", "cc.type", "cc.measure")]
```

## Interactivity

Interactive charts or maps 

::: {.panel-tabset}

### <img src="https://raw.githubusercontent.com/zoometh/thomashuet/master/img/r-pkg-leaflet.png" style="height: 40px; vertical-align:middle">

```{.r}
geojson_map(interactive = T)
```

```{=html}
<iframe width="1200" height="500" src="http://shinyserver.cfs.unipi.it:3838/eamena/eamenaR/caravanserail_plotly.html"></iframe>
```

### <img src="https://raw.githubusercontent.com/zoometh/thomashuet/master/img/r-pkg-plotly.png" style="height: 45px; vertical-align:middle">

```{.r}
geojson_map_path(interactive = T, selected.category = c(1))
```

```{=html}
<iframe width="1200" height="500" src="http://shinyserver.cfs.unipi.it:3838/eamena/eamenaR/paths_map_route_2.html"></iframe>
```

:::

\


# Data <br>management <br>and audit{background-color="#f3e7b3"}


## Bulk Upload


::: {.panel-tabset}

### Workflow


```{mermaid}
flowchart LR
A[structured file<br><em>source</em>] ----> B("list_mapping_bu()"):::eamenaRfunction;
A -. a. get MBR .-> D("geom_bbox()"):::eamenaRfunction;
B --1. mapping file--> B;
B --2. export--> C[BU file<br><em>target</em>];
subgraph ide1 [Geometries];
D -. b. creates .-> E[mbr.geojson];
end;
E -- + GRID ID --> B; 
classDef eamenaRfunction fill:#e7deca;
```


### Mapping table

* The **target** are the field names of an <img src='https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/app-arches.png' style='height: 35px;vertical-align: middle;'> instance  

* The **source** depends on the different authors (here '`mk`' = Mohamed Kenawi).

* The type of action to perform on **source** field names values are: 

<table>
<thead>
  <tr>
    <th>key</th>
    <th>description</th>
  </tr>
</thead>
<tbody>
  <tr>
    <td bgcolor="#f4c7c3">value</td>
    <td>repeat a single value for the whole BU</td>
  </tr>
  <tr>
    <td bgcolor="#ffc000">field</td>
    <td>get the different values of a source field and add these different values in a BU field</td>
  </tr>
  <tr>
    <td bgcolor="#0070c0">>expression</td>
    <td>execute an R code snippet</td>
  </tr>
  <tr>
    <td bgcolor="#fce8b2">escape</td>
    <td>the value is calculated in another field</td>
  </tr>
</tbody>
</table>


```{=html}
<iframe width="1300" height="700" src="https://docs.google.com/spreadsheets/d/1nXgz98mGOySgc0Q2zIeT1RvHGNl4WRq1Fp9m5qB8g8k/edit#gid=1083097625"></iframe>
```

:::

## XXX


## 3<sup>rd</sup> party data

::: {.panel-tabset}

### append geometries

blbla

### rrr

dddd

:::


## Duplicates

```{.r}
d <- hash::hash()
d <- ref_are_duplicates(d = d,
                        hp.list = c("EAMENA-0207209", "EAMENA-0182057"),
                        selected.fields = c("Assessment Investigator - Actor",
                                            "Assessment Activity Date",
                                            "Resource Name"))
kable(d$are_duplicates) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20)
```

```{r}
#| echo: false
options(encoding = 'UTF-8')

d <- hash::hash()
d <- ref_are_duplicates(d = d,
                        c("EAMENA-0207209", "EAMENA-0182057"),
                        selected.fields = c("Assessment Investigator - Actor",
                                            "Assessment Activity Date",
                                            "Resource Name"),
                        verbose = F)
# d$are_duplicates[ , 2] <- stringi::stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1", d$are_duplicates[ , 2]))
# d$are_duplicates[ , 3] <- stringi::stri_unescape_unicode(gsub("<U\\+(....)>", "\\\\u\\1", d$are_duplicates[ , 3]))
kable(d$are_duplicates) %>%
  kable_styling(full_width = FALSE, position = "center", font_size = 20) %>%
  column_spec(1, bold = T)
```


# Conclusion {background-color="#f3e7b3"}


## FAIR data

Makes data FAIR (*Findable, Accessible, Interoperable, Reusable*)


```{mermaid}
flowchart LR
subgraph ide1 [<b>F</b>indable, <b>A</b>ccessible];
A[(EAMENA<br>DB)];
end;
A[(EAMENA<br>DB)] <---> B{{"eamenaR"}}:::eamenaRpkg;
subgraph ide2 [<b>I</b>nteroperable, <b>R</b>eusable];
B;
end;
classDef eamenaRpkg fill:#e3c071;
```

# Practice {background-color="#f3e7b3"}


## TESTS

<a href="https://github.com/zoometh/thomashuet/blob/8f5665eca9efc76f26847258711a71b5adda1133/teachings/stats/R4Archaeo/index.qmd#L402"><small><notes>source code<img src="https://raw.githubusercontent.com/zoometh/thomashuet/master/img/app-github-1.png" style="height: 35px;vertical-align: middle;"/></notes></small></a>


<center>

<img src="https://raw.githubusercontent.com/eamena-project/eamena-arches-dev/master/www/eamenaR-fair.png" width="600">

</center>


```{mermaid}
flowchart LR
subgraph ide1 [<b>F</b>indable, <b>A</b>ccessible]
A[(EAMENA<br>DB)];
end
A[(EAMENA<br>DB)] <---> B{{"eamenaR"}}:::eamenaRpkg;
subgraph ide2 [<b>I</b>nteroperable, <b>R</b>eusable]
B;
end
classDef eamenaRpkg fill:#e3c071;
```



```{mermaid}
flowchart LR
A[(EAMENA<br>DB)] <--data<br>exchange--> B{{"eamenaR"}}:::eamenaRpkg;
B --data<br>management--> B;
B <--data<br>exchange--> C((third part<br>app));
B --"output"--> D[maps<br>charts<br>listings<br>...];
classDef eamenaRpkg fill:#e3c071;
```


